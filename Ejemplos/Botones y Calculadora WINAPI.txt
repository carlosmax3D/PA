#include<windows.h>

#define ID_BUTTON 101 // 100 Buttons
#define ID_BUTTON_ADD 102 // 100 Buttons
#define ID_BUTTON_SUB 103 // 100 Buttons
#define ID_EDIT 201 // 200 Edits
#define ID_EDIT_VALUE1 202 // 200 Edits
#define ID_EDIT_VALUE2 203 // 200 Edits
#define ID_EDIT_RESULT 204 // 200 Edits
//Callback
LRESULT CALLBACK WinProc(HWND hWnd, UINT msg, 
	WPARAM wParam, LPARAM lParam);

HWND hwndButton;
HWND hwndButtonAdd;
HWND hwndButtonSub;

HWND hwndEdit;
HWND hwndEditValue1;
HWND hwndEditValue2;
HWND hwndEditResult;
TCHAR text[256] = "Mensaje";
TCHAR value1[256] = "";
TCHAR value2[256] = "";
TCHAR result[256] = "";
int val1;
int val2;
int res;

int ConvertToInt(TCHAR str[256])
{
	int value = atoi(str);
	return value;
}

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,
	PSTR cmdLine, int showCmd) 
{
	WNDCLASSEX wClass; //Nuestra ventana
	ZeroMemory(&wClass, sizeof(WNDCLASSEX));//Incializa el bloque 
	//de memoria con 0 para evitar que inicie con basura
	wClass.cbClsExtra = NULL; /* Indica bytes extra para la estructura*/
	wClass.cbWndExtra = NULL; /* Indica bytes extra para la instancia*/

	wClass.cbSize = sizeof(WNDCLASSEX); /*Especificamos el atamño de la ventana en bytes*/

	wClass.hbrBackground = (HBRUSH)2; // Color de fondo
	wClass.hCursor = LoadCursor(NULL, IDC_ARROW);// Cursor

	wClass.hIcon = NULL; // Icono de la ventana en barra de tareas
	wClass.hIconSm = NULL; // Icono de la ventana en ventana
	wClass.hInstance = hInstance; //Identificador que nos da el Sistema Operativo

	wClass.lpfnWndProc = (WNDPROC)WinProc; // Callback al cual va acceder

	wClass.lpszClassName = "Windows Class"; // Nombre de nuestra ventana

	wClass.lpszMenuName = NULL; // Si se usa algun menu sando resource

	wClass.style = CS_HREDRAW | CS_VREDRAW; //Comportamiento de nuestra ventana
	/*Redibujar ventana si el usuario la mueve horizontalmente*/
	/*Redibujar ventana si el usuario la mueve verticalmente*/

	if (!RegisterClassEx(&wClass))
	{
		int nResult = GetLastError();
		MessageBox(NULL, "Windows Class fallo al crearse", 
			"Windows Class ERROR", MB_ICONERROR);
		// Controlador (HANDLER)
		// Mensaje
		// Titulo
		// Icono
	}

	HWND hWnd = CreateWindowEx(NULL,
		"Windows Class", // Nombre
		"Funcion Principal", //Titulo ventana
		WS_OVERLAPPEDWINDOW, //Estilo 
		1500, // Posicion X
		100, // Posicion Y
		640, // Ancho
		480, // Alto
		NULL, //Ventana Padre
		NULL, //Menu
		hInstance, // Identificador asignado por nuestro Sistema Operativo
		NULL //Puntero
	);

	if (!hWnd)
	{
		int nResult = GetLastError();
		MessageBox(NULL, "Controlador no generado", "Windows Creation Failed", MB_ICONERROR);
	}

	ShowWindow(hWnd, showCmd); // Mostrar la venana

	MSG msg; //Variable que escuchara los mensajes
	ZeroMemory(&msg, sizeof(MSG));//Limpiar la memoria
	//Regresaremos un true ientras o sea un QUIT
	while (GetMessage(&msg, NULL, 0, 0))
	{
		TranslateMessage(&msg); //Traduce mensajes de texto
		DispatchMessage(&msg); //Envia los mensajes a su receptor
	}
	return 0;
}

LRESULT CALLBACK WinProc(HWND hWnd, UINT msg, 
	WPARAM wParam, LPARAM lParam)
{
	switch (msg)//Escuchar el mensaje
	{
		case WM_CREATE:// Al momento de crear la ventana
			hwndEditValue1 = CreateWindow(
				"EDIT", //Clase
				"", // Texto Boton
				WS_CHILD | WS_VISIBLE | WS_VSCROLL | ES_LEFT |
				ES_MULTILINE | ES_AUTOVSCROLL, // Estilos
				10, //Posicion X
				10, // Posicion Y
				500, //Ancho
				50, //Alto
				hWnd, // Ventana padre
				(HMENU)ID_EDIT_VALUE1,//ID
				(HINSTANCE)GetWindowLong(hWnd, GWL_HINSTANCE),
				NULL // Puntero
			);
			hwndEditValue2 = CreateWindow(
				"EDIT", //Clase
				"", // Texto Boton
				WS_CHILD | WS_VISIBLE | WS_VSCROLL | ES_LEFT |
				ES_MULTILINE | ES_AUTOVSCROLL, // Estilos
				10, //Posicion X
				80, // Posicion Y
				500, //Ancho
				50, //Alto
				hWnd, // Ventana padre
				(HMENU)ID_EDIT_VALUE2,//ID
				(HINSTANCE)GetWindowLong(hWnd, GWL_HINSTANCE),
				NULL // Puntero
			);
			hwndEditResult = CreateWindow(
				"EDIT", //Clase
				"", // Texto Boton
				WS_CHILD | WS_VISIBLE | WS_VSCROLL | ES_LEFT |
				ES_MULTILINE | ES_AUTOVSCROLL, // Estilos
				10, //Posicion X
				150, // Posicion Y
				500, //Ancho
				50, //Alto
				hWnd, // Ventana padre
				(HMENU)ID_EDIT_RESULT,//ID
				(HINSTANCE)GetWindowLong(hWnd, GWL_HINSTANCE),
				NULL // Puntero
			);
			hwndButtonAdd = CreateWindow(
				"BUTTON", //Clase
				"+", // Texto Boton
				WS_TABSTOP | WS_VISIBLE | WS_CHILD | BS_DEFPUSHBUTTON, // Estilos
				30, //Posicion X
				220, // Posicion Y
				100, //Ancho
				50, //Alto
				hWnd, // Ventana padre
				(HMENU)ID_BUTTON_ADD,//ID
				(HINSTANCE)GetWindowLong(hWnd, GWL_HINSTANCE),
				NULL // Puntero
			);
			hwndButtonSub = CreateWindow(
				"BUTTON", //Clase
				"-", // Texto Boton
				WS_TABSTOP | WS_VISIBLE | WS_CHILD | BS_DEFPUSHBUTTON, // Estilos
				150, //Posicion X
				220, // Posicion Y
				100, //Ancho
				50, //Alto
				hWnd, // Ventana padre
				(HMENU)ID_BUTTON_SUB,//ID
				(HINSTANCE)GetWindowLong(hWnd, GWL_HINSTANCE),
				NULL // Puntero
			);
			/*
			hwndButton = CreateWindow(
				"BUTTON", //Clase
				"MESSAGE", // Texto Boton
				WS_TABSTOP | WS_VISIBLE | WS_CHILD | BS_DEFPUSHBUTTON, // Estilos
				30, //Posicion X
				100, // Posicion Y
				100, //Ancho
				50, //Alto
				hWnd, // Ventana padre
				(HMENU)ID_BUTTON,//ID
				(HINSTANCE)GetWindowLong(hWnd, GWL_HINSTANCE),
				NULL // Puntero
			);
			hwndEdit = CreateWindow(
				"EDIT", //Clase
				"", // Texto Boton
				WS_CHILD | WS_VISIBLE | WS_VSCROLL | ES_LEFT |
				ES_MULTILINE | ES_AUTOVSCROLL, // Estilos
				10, //Posicion X
				10, // Posicion Y
				500, //Ancho
				50, //Alto
				hWnd, // Ventana padre
				(HMENU)ID_EDIT,//ID
				(HINSTANCE)GetWindowLong(hWnd, GWL_HINSTANCE),
				NULL // Puntero
			);
			*/
			//SendMessage(hwndEdit, WM_SETTEXT, NULL, (LPARAM)text);
			break;
		case WM_COMMAND:
		{
			switch (LOWORD(wParam))
			{
			case ID_BUTTON:
				//SendMessage(hwndEdit, WM_SETTEXT, NULL, (LPARAM)text);
				SendMessage(hwndEdit, WM_GETTEXT, sizeof(text), (LPARAM)text);
				MessageBox(hWnd, text, "Prueba", MB_OK);
				break;
			case ID_BUTTON_ADD:
			{
				SendMessage(hwndEditValue1, WM_GETTEXT, sizeof(value1), (LPARAM)value1);
				SendMessage(hwndEditValue2, WM_GETTEXT, sizeof(value2), (LPARAM)value2);
				int res = ConvertToInt(value1) + ConvertToInt(value2);
				_itoa(res,result,10);
				SendMessage(hwndEditResult, WM_SETTEXT, NULL, (LPARAM)result);
				break;
			}
			case ID_BUTTON_SUB:
				SendMessage(hwndEditValue1, WM_GETTEXT, sizeof(value1), (LPARAM)value1);
				SendMessage(hwndEditValue2, WM_GETTEXT, sizeof(value2), (LPARAM)value2);
				int res = ConvertToInt(value1) - ConvertToInt(value2);
				_itoa(res, result, 10);
				SendMessage(hwndEditResult, WM_SETTEXT, NULL, (LPARAM)result);
				break;
			}
			break;
		}
		case WM_DESTROY: //Al momento de destruir la ventana
			PostQuitMessage(0); // Mensaje de salida, rompe el ciclo de mensajes
			break;
		case WM_CLOSE: // Al momento de cerrar la ventana
			DestroyWindow(hWnd);//Mandar a destruir la ventana
			break;
		default:
			return DefWindowProc(hWnd, msg, wParam, lParam);
			break;
	}
	return 0;
}
