#include <windows.h>
#include <stdio.h>
#include "resource.h"

//SampleImage Image "sampleImage.jpg"


#define IDT_TIMER1 900
BOOL CALLBACK DialogProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);
void GetTime();
HINSTANCE hinst;

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,
	PSTR cmdLine, int showCmd)
{
	HWND dialog;
	hinst = hInstance;
	dialog = CreateDialog(hInstance, MAKEINTRESOURCE(IDD_DIALOG1), NULL, DialogProc);
	if (!dialog)
	{
		MessageBox(NULL, "No se pudo crear el Dialog", "Creacion de Dialog", MB_ICONERROR);
		return 1;
	}
	ShowWindow(dialog, showCmd);
	UpdateWindow(dialog);
	MSG msg;
	while (GetMessage(&msg, 0, 0, 0))
	{
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}

	return (int)msg.wParam;
}

HWND hStaticTimer1;
HWND hStaticTimer2;
SYSTEMTIME st, lt;

BOOL CALLBACK DialogProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)
{
	switch (msg)
	{
	case WM_INITDIALOG:
	{
		hStaticTimer1 = GetDlgItem(hWnd, IDC_STATIC_TIMER);
		hStaticTimer2 = GetDlgItem(hWnd, IDC_STATIC_TIMER2);
		SetTimer(hWnd,            
			IDT_TIMER1,           
			1000,                 
			(TIMERPROC)NULL);    

		
	}
	break;
	case WM_TIMER:

		switch (wParam)
		{
		case IDT_TIMER1:
			GetTime();
			TCHAR buff[1024];
			TCHAR buff2[1024];
			snprintf(buff, 1024, "The system time is: %02d:%02d\n", st.wHour, st.wMinute);
			snprintf(buff2, 1024, "The local time is : % 02d : % 02d\n", lt.wHour, lt.wMinute);
			SetWindowText(hStaticTimer1, buff);
			SetWindowText(hStaticTimer2, buff2);
			// process the 5-second timer 
			//MessageBox(NULL, "Tick", "Tick", NULL);

			break;
		}
		break;
	case WM_COMMAND:
		switch (LOWORD(wParam))
		{

		case IDOK:
		{
			//KillTimer(hWnd, IDT_TIMER1);

			//HBITMAP bmp = (HBITMAP)LoadImage(GetModuleHandle(NULL), MAKEINTRESOURCE(IDB_BITMAP1), IMAGE_BITMAP, 0, 0, LR_COLOR);
			HBITMAP bmp = (HBITMAP)LoadImage(hinst, MAKEINTRESOURCE(IDB_BITMAP1), IMAGE_BITMAP, 0, 0, LR_DEFAULTCOLOR | LR_DEFAULTSIZE);
			if (bmp == NULL)
			{

				MessageBox(NULL, "Error", "ERROR", MB_OK);
				return TRUE;
			}
			SendDlgItemMessage(hWnd, IDC_STATIC_IMAGE, STM_SETIMAGE, IMAGE_BITMAP, (LPARAM)bmp);
			break;
		}
		case IDCANCEL:
		{

			break;
		}
		}
		break;
	case WM_CLOSE:
		DestroyWindow(hWnd);
		return TRUE;
		break;
	case WM_DESTROY:
		PostQuitMessage(0);
		return TRUE;
		break;
	default:
		return FALSE;
	}
	return FALSE;
}

void GetTime()
{
	GetSystemTime(&st);
	GetLocalTime(&lt);
}