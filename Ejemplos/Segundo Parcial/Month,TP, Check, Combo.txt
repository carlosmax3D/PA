#include <windows.h>
#include <stdio.h>
#include "resource.h"
#include <commctrl.h>
BOOL CALLBACK DialogProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);

HINSTANCE hinst;
#define BOLDDAY(ds, iDay)  \
        if (iDay > 0 && iDay < 32)(ds) |= (0x00000001 << (iDay - 1))
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,
	PSTR cmdLine, int showCmd)
{
	HWND dialog;
	hinst = hInstance;
	dialog = CreateDialog(hInstance, MAKEINTRESOURCE(IDD_DIALOG1), NULL, DialogProc);
	if (!dialog)
	{
		MessageBox(NULL, "No se pudo crear el Dialog", "Creacion de Dialog", MB_ICONERROR);
		return 1;
	}
	ShowWindow(dialog, showCmd);
	UpdateWindow(dialog);
	MSG msg;
	while (GetMessage(&msg, 0, 0, 0))
	{
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}

	return (int)msg.wParam;
}

HWND hCalender;
HWND hDatePicker;
HWND hStaticColor;

HWND hCheckBox01, hCheckBox02;
HWND hRadioButton01, hRadioButton02;
BOOL CALLBACK DialogProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)
{
	switch (msg)
	{
	case WM_INITDIALOG:
	{
		hCalender = GetDlgItem(hWnd, IDC_MONTHCALENDAR1);
		hDatePicker = GetDlgItem(hWnd, IDC_DATETIMEPICKER1);
		//hStaticColor = GetDlgItem(hWnd, IDC_STATIC_COLOR);
		//SetTextColor(hStaticColor, RGB(0,0,255));
		hCheckBox01 = GetDlgItem(hWnd, IDC_CHECK1);
		hCheckBox02 = GetDlgItem(hWnd, IDC_CHECK2);
		hRadioButton01 = GetDlgItem(hWnd, IDC_RADIO1);
		hRadioButton02 = GetDlgItem(hWnd, IDC_RADIO2);
	}
	break;
	case WM_CTLCOLORSTATIC:
	{
		
		switch (GetDlgCtrlID((HWND)lParam))
		{
			case IDC_STATIC_COLOR:
			{
				HDC hdcStatic = (HDC)wParam;
				SetTextColor(hdcStatic, RGB(0, 0, 255));

			}
			break;
			case IDC_STATIC_COLOR2:
			{
				HDC hdcStatic = (HDC)wParam;
				SetTextColor(hdcStatic, RGB(0, 255, 0));
			}
		}
		//HDC hdcStatic = (HDC)wParam;
		//SetTextColor(hdcStatic, RGB(0, 0, 255)); 
		//SetBkColor(hdcStatic, RGB(12, 34, 210));
		return (LRESULT)GetStockObject(NULL_BRUSH);
	}
	break;
	case WM_NOTIFY:
		switch (((LPNMHDR)lParam)->code)
		{
			case MCN_GETDAYSTATE:
			{
				MONTHDAYSTATE rgMonths[12] = { 0 };
				int cMonths = ((NMDAYSTATE*)lParam)->cDayState;
				for (int i = 0; i < cMonths; i++)
				{
					BOLDDAY(rgMonths[i], 1);
					BOLDDAY(rgMonths[i], 15);
				}
				((NMDAYSTATE*)lParam)->prgDayState = rgMonths;
				return TRUE;
			}
			break;
		}
		break;
	case WM_COMMAND:
		switch (LOWORD(wParam))
		{
		case IDC_RADIO1:
			MessageBox(NULL, "PRESIONADO", "PRESS", NULL);
			break;
		case IDC_DATETIMEPICKER1:
			switch (HIWORD(wParam))
			{
			case DTN_DATETIMECHANGE:
				SYSTEMTIME selected;
				DATETIMEPICKERINFO info;
				DateTime_GetDateTimePickerInfo(hDatePicker, &info);
				HWND month = DateTime_GetMonthCal(hDatePicker);
				MonthCal_GetCurSel(month, &selected);
				int date = selected.wDay;
				break;
			}
			break;
		case IDOK:
		{
			/*
			SYSTEMTIME current,selected;
			MonthCal_GetToday(hCalender, &current); //MCM_GETTODAY
			MonthCal_GetCurSel(hCalender, &selected);// MCM_GETCURSEL 
			int day = current.wDay;
			
			MonthCal_SetRange(hCalender, GDTR_MIN, &current);
			MonthCal_SetRange(hCalender, GDTR_MAX, &selected);

			COLORREF color;
			color = RGB(255,0,0);
			
			MonthCal_SetColor(hCalender, MCSC_TITLEBK, RGB(255, 0, 155));
			MonthCal_SetCurSel(hCalender, &current);//MCM_SETCURSEL
			*/
			SYSTEMTIME selected;
			DATETIMEPICKERINFO info;
			//SetDlgItemInt(hWnd, IDC_EDIT1, 10, true);
			//DateTime_GetDateTimePickerInfo(hDatePicker, &info);
			//HWND month = (HWND)SendDlgItemMessage(hWnd, IDC_DATETIMEPICKER1, DTM_GETMONTHCAL, 0, 0); //DateTime_GetMonthCal(hDatePicker);
			
			//MonthCal_GetCurSel(month, &selected);
			//int date = selected.wDay;
			DateTime_GetDateTimePickerInfo(hDatePicker, &info);
			DateTime_GetSystemtime(hDatePicker, &selected);
			int i = 0;

			UINT value = IsDlgButtonChecked(hWnd, IDC_CHECK1);
			UINT value2 = IsDlgButtonChecked(hWnd, IDC_CHECK2);
			UINT value3 = IsDlgButtonChecked(hWnd, IDC_RADIO1);
			UINT value4 = IsDlgButtonChecked(hWnd, IDC_RADIO2);
			if (value == BST_CHECKED)
				MessageBox(NULL, "MARCADO 1", "Marcado", NULL);
			if (value2 == BST_CHECKED)
				MessageBox(NULL, "MARCADO 2", "Marcado", NULL);
			if (value3 == BST_CHECKED)
				MessageBox(NULL, "MARCADO 3", "Marcado", NULL);
			if (value4 == BST_CHECKED)
				MessageBox(NULL, "MARCADO 4", "Marcado", NULL);
			i = 0;
			CheckDlgButton(hWnd, IDC_CHECK1, BST_CHECKED);
			break;
		}
		case IDCANCEL:
		{
			/*
			SYSTEMTIME current, selected;
			MonthCal_GetToday(hCalender, &current); //MCM_GETTODAY
			MonthCal_SetCurSel(hCalender, &current);//MCM_SETCURSEL
			*/
			break;
		}
		}
		break;
	case WM_CLOSE:
		DestroyWindow(hWnd);
		return TRUE;
		break;
	case WM_DESTROY:
		PostQuitMessage(0);
		return TRUE;
		break;
	default:
		return FALSE;
	}
	return FALSE;
}
